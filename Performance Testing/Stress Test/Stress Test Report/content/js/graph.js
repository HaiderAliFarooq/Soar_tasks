/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8986.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 2.0], [55.5, 2.0], [55.6, 2.0], [55.7, 2.0], [55.8, 2.0], [55.9, 2.0], [56.0, 2.0], [56.1, 2.0], [56.2, 2.0], [56.3, 2.0], [56.4, 2.0], [56.5, 2.0], [56.6, 2.0], [56.7, 2.0], [56.8, 2.0], [56.9, 2.0], [57.0, 2.0], [57.1, 2.0], [57.2, 2.0], [57.3, 2.0], [57.4, 2.0], [57.5, 2.0], [57.6, 2.0], [57.7, 2.0], [57.8, 2.0], [57.9, 2.0], [58.0, 2.0], [58.1, 2.0], [58.2, 2.0], [58.3, 2.0], [58.4, 2.0], [58.5, 2.0], [58.6, 2.0], [58.7, 2.0], [58.8, 2.0], [58.9, 2.0], [59.0, 2.0], [59.1, 2.0], [59.2, 2.0], [59.3, 2.0], [59.4, 2.0], [59.5, 2.0], [59.6, 2.0], [59.7, 2.0], [59.8, 2.0], [59.9, 2.0], [60.0, 2.0], [60.1, 2.0], [60.2, 2.0], [60.3, 2.0], [60.4, 2.0], [60.5, 2.0], [60.6, 2.0], [60.7, 2.0], [60.8, 2.0], [60.9, 2.0], [61.0, 2.0], [61.1, 2.0], [61.2, 2.0], [61.3, 2.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 3.0], [62.7, 3.0], [62.8, 3.0], [62.9, 3.0], [63.0, 3.0], [63.1, 3.0], [63.2, 3.0], [63.3, 3.0], [63.4, 3.0], [63.5, 3.0], [63.6, 3.0], [63.7, 3.0], [63.8, 3.0], [63.9, 3.0], [64.0, 3.0], [64.1, 3.0], [64.2, 3.0], [64.3, 3.0], [64.4, 3.0], [64.5, 3.0], [64.6, 3.0], [64.7, 3.0], [64.8, 3.0], [64.9, 3.0], [65.0, 3.0], [65.1, 3.0], [65.2, 3.0], [65.3, 3.0], [65.4, 3.0], [65.5, 3.0], [65.6, 3.0], [65.7, 3.0], [65.8, 3.0], [65.9, 3.0], [66.0, 3.0], [66.1, 3.0], [66.2, 3.0], [66.3, 3.0], [66.4, 3.0], [66.5, 3.0], [66.6, 3.0], [66.7, 3.0], [66.8, 3.0], [66.9, 3.0], [67.0, 3.0], [67.1, 3.0], [67.2, 3.0], [67.3, 3.0], [67.4, 3.0], [67.5, 3.0], [67.6, 4.0], [67.7, 4.0], [67.8, 4.0], [67.9, 4.0], [68.0, 4.0], [68.1, 4.0], [68.2, 4.0], [68.3, 4.0], [68.4, 4.0], [68.5, 4.0], [68.6, 4.0], [68.7, 4.0], [68.8, 4.0], [68.9, 4.0], [69.0, 4.0], [69.1, 4.0], [69.2, 4.0], [69.3, 4.0], [69.4, 4.0], [69.5, 4.0], [69.6, 4.0], [69.7, 4.0], [69.8, 4.0], [69.9, 4.0], [70.0, 4.0], [70.1, 4.0], [70.2, 4.0], [70.3, 4.0], [70.4, 4.0], [70.5, 4.0], [70.6, 4.0], [70.7, 4.0], [70.8, 5.0], [70.9, 5.0], [71.0, 5.0], [71.1, 5.0], [71.2, 5.0], [71.3, 5.0], [71.4, 5.0], [71.5, 5.0], [71.6, 5.0], [71.7, 5.0], [71.8, 5.0], [71.9, 5.0], [72.0, 5.0], [72.1, 5.0], [72.2, 5.0], [72.3, 5.0], [72.4, 5.0], [72.5, 5.0], [72.6, 5.0], [72.7, 5.0], [72.8, 5.0], [72.9, 5.0], [73.0, 5.0], [73.1, 5.0], [73.2, 5.0], [73.3, 6.0], [73.4, 6.0], [73.5, 6.0], [73.6, 6.0], [73.7, 6.0], [73.8, 6.0], [73.9, 6.0], [74.0, 6.0], [74.1, 6.0], [74.2, 6.0], [74.3, 6.0], [74.4, 6.0], [74.5, 6.0], [74.6, 6.0], [74.7, 6.0], [74.8, 6.0], [74.9, 6.0], [75.0, 6.0], [75.1, 6.0], [75.2, 6.0], [75.3, 6.0], [75.4, 6.0], [75.5, 6.0], [75.6, 7.0], [75.7, 7.0], [75.8, 7.0], [75.9, 7.0], [76.0, 7.0], [76.1, 7.0], [76.2, 7.0], [76.3, 7.0], [76.4, 7.0], [76.5, 7.0], [76.6, 7.0], [76.7, 7.0], [76.8, 7.0], [76.9, 7.0], [77.0, 7.0], [77.1, 7.0], [77.2, 7.0], [77.3, 7.0], [77.4, 7.0], [77.5, 7.0], [77.6, 8.0], [77.7, 8.0], [77.8, 8.0], [77.9, 8.0], [78.0, 8.0], [78.1, 8.0], [78.2, 8.0], [78.3, 8.0], [78.4, 8.0], [78.5, 8.0], [78.6, 8.0], [78.7, 8.0], [78.8, 8.0], [78.9, 8.0], [79.0, 8.0], [79.1, 8.0], [79.2, 8.0], [79.3, 8.0], [79.4, 8.0], [79.5, 9.0], [79.6, 9.0], [79.7, 9.0], [79.8, 9.0], [79.9, 9.0], [80.0, 9.0], [80.1, 9.0], [80.2, 9.0], [80.3, 9.0], [80.4, 9.0], [80.5, 9.0], [80.6, 9.0], [80.7, 9.0], [80.8, 9.0], [80.9, 9.0], [81.0, 9.0], [81.1, 9.0], [81.2, 10.0], [81.3, 10.0], [81.4, 10.0], [81.5, 10.0], [81.6, 10.0], [81.7, 10.0], [81.8, 10.0], [81.9, 10.0], [82.0, 10.0], [82.1, 10.0], [82.2, 10.0], [82.3, 10.0], [82.4, 10.0], [82.5, 10.0], [82.6, 10.0], [82.7, 11.0], [82.8, 11.0], [82.9, 11.0], [83.0, 11.0], [83.1, 11.0], [83.2, 11.0], [83.3, 11.0], [83.4, 11.0], [83.5, 11.0], [83.6, 11.0], [83.7, 11.0], [83.8, 11.0], [83.9, 11.0], [84.0, 12.0], [84.1, 12.0], [84.2, 12.0], [84.3, 12.0], [84.4, 12.0], [84.5, 12.0], [84.6, 12.0], [84.7, 12.0], [84.8, 12.0], [84.9, 12.0], [85.0, 12.0], [85.1, 12.0], [85.2, 13.0], [85.3, 13.0], [85.4, 13.0], [85.5, 13.0], [85.6, 13.0], [85.7, 13.0], [85.8, 13.0], [85.9, 13.0], [86.0, 13.0], [86.1, 13.0], [86.2, 14.0], [86.3, 14.0], [86.4, 14.0], [86.5, 14.0], [86.6, 14.0], [86.7, 14.0], [86.8, 14.0], [86.9, 14.0], [87.0, 14.0], [87.1, 15.0], [87.2, 15.0], [87.3, 15.0], [87.4, 15.0], [87.5, 15.0], [87.6, 15.0], [87.7, 15.0], [87.8, 16.0], [87.9, 16.0], [88.0, 16.0], [88.1, 16.0], [88.2, 16.0], [88.3, 16.0], [88.4, 17.0], [88.5, 17.0], [88.6, 17.0], [88.7, 17.0], [88.8, 17.0], [88.9, 17.0], [89.0, 18.0], [89.1, 18.0], [89.2, 18.0], [89.3, 18.0], [89.4, 18.0], [89.5, 19.0], [89.6, 19.0], [89.7, 19.0], [89.8, 19.0], [89.9, 19.0], [90.0, 20.0], [90.1, 20.0], [90.2, 20.0], [90.3, 20.0], [90.4, 21.0], [90.5, 21.0], [90.6, 21.0], [90.7, 22.0], [90.8, 22.0], [90.9, 22.0], [91.0, 23.0], [91.1, 23.0], [91.2, 23.0], [91.3, 24.0], [91.4, 24.0], [91.5, 24.0], [91.6, 25.0], [91.7, 25.0], [91.8, 25.0], [91.9, 26.0], [92.0, 26.0], [92.1, 27.0], [92.2, 27.0], [92.3, 28.0], [92.4, 28.0], [92.5, 29.0], [92.6, 29.0], [92.7, 30.0], [92.8, 30.0], [92.9, 31.0], [93.0, 32.0], [93.1, 32.0], [93.2, 33.0], [93.3, 34.0], [93.4, 35.0], [93.5, 35.0], [93.6, 36.0], [93.7, 37.0], [93.8, 38.0], [93.9, 39.0], [94.0, 40.0], [94.1, 41.0], [94.2, 42.0], [94.3, 43.0], [94.4, 44.0], [94.5, 45.0], [94.6, 46.0], [94.7, 48.0], [94.8, 49.0], [94.9, 50.0], [95.0, 52.0], [95.1, 54.0], [95.2, 56.0], [95.3, 58.0], [95.4, 60.0], [95.5, 63.0], [95.6, 66.0], [95.7, 69.0], [95.8, 72.0], [95.9, 75.0], [96.0, 79.0], [96.1, 82.0], [96.2, 85.0], [96.3, 88.0], [96.4, 92.0], [96.5, 96.0], [96.6, 101.0], [96.7, 106.0], [96.8, 111.0], [96.9, 118.0], [97.0, 125.0], [97.1, 137.0], [97.2, 158.0], [97.3, 216.0], [97.4, 361.0], [97.5, 652.0], [97.6, 683.0], [97.7, 702.0], [97.8, 717.0], [97.9, 731.0], [98.0, 744.0], [98.1, 756.0], [98.2, 767.0], [98.3, 778.0], [98.4, 789.0], [98.5, 800.0], [98.6, 811.0], [98.7, 822.0], [98.8, 834.0], [98.9, 846.0], [99.0, 860.0], [99.1, 875.0], [99.2, 893.0], [99.3, 913.0], [99.4, 937.0], [99.5, 968.0], [99.6, 1014.0], [99.7, 1082.0], [99.8, 1188.0], [99.9, 1343.0], [100.0, 8986.0]], "isOverall": false, "label": "Client Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3212714.0, "series": [{"data": [[0.0, 3212714.0], [600.0, 8035.0], [700.0, 26910.0], [800.0, 24594.0], [900.0, 11221.0], [1000.0, 4864.0], [1100.0, 2989.0], [1200.0, 2070.0], [1300.0, 2037.0], [1400.0, 871.0], [1500.0, 441.0], [1600.0, 264.0], [1700.0, 142.0], [1800.0, 88.0], [1900.0, 55.0], [2000.0, 55.0], [2100.0, 24.0], [2200.0, 12.0], [2300.0, 14.0], [2400.0, 9.0], [2500.0, 1.0], [2800.0, 4.0], [2900.0, 1.0], [3100.0, 1.0], [3200.0, 6.0], [3300.0, 4.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 4.0], [3800.0, 2.0], [3900.0, 3.0], [4000.0, 3.0], [4200.0, 3.0], [4300.0, 2.0], [4400.0, 3.0], [4500.0, 4.0], [4600.0, 3.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5400.0, 1.0], [5700.0, 1.0], [6300.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7200.0, 1.0], [7300.0, 1.0], [7600.0, 8.0], [7800.0, 39.0], [7900.0, 37.0], [7700.0, 14.0], [8100.0, 5.0], [8000.0, 21.0], [8200.0, 1.0], [8400.0, 3.0], [8600.0, 2.0], [8700.0, 11.0], [8800.0, 34.0], [8900.0, 27.0], [100.0, 23687.0], [200.0, 2731.0], [300.0, 1328.0], [400.0, 648.0], [500.0, 733.0]], "isOverall": false, "label": "Client Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3244689.0, "series": [{"data": [[0.0, 49.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 80698.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1361.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3244689.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 492.88130023724494, "minX": 1.73644674E12, "maxY": 500.0, "series": [{"data": [[1.73644716E12, 500.0], [1.73644734E12, 492.88130023724494], [1.73644686E12, 500.0], [1.73644728E12, 500.0], [1.7364468E12, 500.0], [1.73644698E12, 500.0], [1.73644692E12, 500.0], [1.7364471E12, 500.0], [1.73644704E12, 500.0], [1.73644722E12, 500.0], [1.73644674E12, 500.0]], "isOverall": false, "label": "Stress- Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73644734E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 863.0, "series": [{"data": [[2.0, 250.0], [3.0, 273.0], [4.0, 322.0], [5.0, 340.0], [6.0, 339.0], [7.0, 393.0], [8.0, 382.0], [9.0, 390.0], [10.0, 406.0], [11.0, 430.0], [12.0, 424.0], [13.0, 421.0], [15.0, 417.0], [16.0, 414.0], [17.0, 409.0], [18.0, 404.0], [19.0, 403.0], [20.0, 401.0], [21.0, 393.0], [22.0, 394.0], [23.0, 388.0], [24.0, 387.0], [25.0, 384.0], [26.0, 380.0], [27.0, 377.0], [28.0, 371.0], [29.0, 369.0], [30.0, 519.0], [31.0, 515.0], [33.0, 510.0], [32.0, 512.0], [35.0, 505.0], [34.0, 508.0], [37.0, 499.0], [36.0, 499.0], [39.0, 488.0], [38.0, 494.0], [41.0, 482.0], [40.0, 485.0], [43.0, 478.0], [42.0, 481.0], [45.0, 468.0], [44.0, 471.0], [47.0, 460.0], [46.0, 464.0], [49.0, 454.0], [48.0, 458.0], [51.0, 451.0], [53.0, 444.0], [52.0, 446.0], [55.0, 438.0], [54.0, 440.0], [57.0, 605.0], [56.0, 609.0], [59.0, 600.0], [58.0, 605.0], [61.0, 597.0], [60.0, 600.0], [62.0, 588.0], [67.0, 571.0], [66.0, 573.0], [65.0, 576.0], [64.0, 583.5], [71.0, 551.0], [70.0, 554.0], [69.0, 559.0], [68.0, 565.0], [74.0, 537.5], [73.0, 548.0], [72.0, 549.0], [79.0, 517.0], [78.0, 523.0], [77.0, 528.0], [76.0, 530.5], [83.0, 692.0], [82.0, 693.0], [81.0, 697.0], [80.0, 613.0], [87.0, 675.0], [86.0, 679.0], [85.0, 679.0], [84.0, 686.0], [91.0, 666.0], [90.0, 672.0], [89.0, 670.0], [88.0, 674.0], [95.0, 649.0], [94.0, 651.0], [93.0, 658.0], [92.0, 660.0], [99.0, 691.6666666666666], [98.0, 639.0], [97.0, 641.0], [96.0, 645.0], [103.0, 620.5], [101.0, 623.0], [100.0, 626.0], [107.0, 788.0], [106.0, 790.0], [105.0, 618.0], [104.0, 619.0], [111.0, 775.0], [110.0, 784.0], [109.0, 784.0], [108.0, 784.0], [115.0, 753.0], [114.0, 757.0], [113.0, 764.0], [112.0, 770.5], [119.0, 740.0], [118.0, 743.0], [117.0, 744.0], [116.0, 749.0], [123.0, 724.0], [122.0, 726.0], [121.0, 731.0], [120.0, 733.0], [127.0, 19.039215686274517], [126.0, 21.571428571428573], [125.0, 716.0], [124.0, 720.0], [135.0, 292.0], [134.0, 23.974358974358974], [133.0, 19.82608695652174], [132.0, 68.1111111111111], [131.0, 30.0], [129.0, 2.5135135135135136], [128.0, 66.57142857142857], [143.0, 53.000000000000014], [142.0, 7.744000000000002], [141.0, 72.33333333333333], [140.0, 1.2222222222222223], [139.0, 30.551724137931036], [138.0, 45.925], [136.0, 3.714285714285714], [151.0, 20.200000000000003], [150.0, 23.12328767123288], [149.0, 10.542168674698795], [148.0, 24.941176470588236], [147.0, 0.6666666666666666], [146.0, 15.968944099378877], [145.0, 19.818181818181817], [144.0, 44.31578947368421], [159.0, 1.0], [158.0, 125.83333333333334], [157.0, 75.95454545454544], [156.0, 10.592592592592592], [152.0, 17.48351648351648], [167.0, 5.134615384615384], [166.0, 45.04444444444442], [165.0, 47.476190476190474], [164.0, 1.0], [163.0, 161.5], [162.0, 1.468085106382979], [161.0, 18.761904761904763], [160.0, 2.425925925925927], [175.0, 1.0], [174.0, 13.57317073170732], [173.0, 48.3], [172.0, 41.23529411764707], [170.0, 34.267857142857146], [168.0, 6.788461538461537], [183.0, 44.3], [182.0, 25.253012048192772], [181.0, 9.0], [180.0, 8.272727272727272], [179.0, 7.173913043478261], [178.0, 6.25], [177.0, 69.73076923076923], [176.0, 7.471698113207549], [191.0, 837.0], [190.0, 80.45454545454548], [189.0, 4.168421052631579], [187.0, 48.76], [186.0, 103.44444444444444], [185.0, 6.53061224489796], [184.0, 1.0], [199.0, 0.4285714285714286], [198.0, 16.864406779661028], [197.0, 1.9090909090909087], [195.0, 69.35135135135135], [194.0, 6.623529411764706], [192.0, 0.7142857142857143], [207.0, 11.545454545454543], [206.0, 6.2631578947368425], [204.0, 69.94999999999997], [203.0, 11.100000000000001], [202.0, 28.575757575757574], [215.0, 24.135416666666664], [213.0, 16.043010752688176], [212.0, 1.0], [211.0, 1.0], [208.0, 87.55000000000001], [223.0, 7.675675675675677], [220.0, 1.6666666666666667], [219.0, 29.773195876288657], [217.0, 365.0], [231.0, 1.0], [227.0, 55.43750000000001], [226.0, 0.8192771084337347], [224.0, 62.35384615384615], [239.0, 812.0], [238.0, 1.4615384615384612], [237.0, 38.38636363636364], [236.0, 16.900000000000002], [234.0, 1.0], [233.0, 25.777777777777775], [232.0, 23.219512195121947], [247.0, 0.9666666666666667], [246.0, 10.71111111111111], [245.0, 788.5], [244.0, 207.75000000000003], [243.0, 16.0], [242.0, 14.66666666666667], [241.0, 21.956140350877188], [240.0, 1.0], [253.0, 19.108108108108105], [252.0, 1.0], [251.0, 52.266666666666666], [248.0, 3.5384615384615383], [270.0, 1.6746987951807233], [271.0, 23.684210526315784], [268.0, 863.0], [259.0, 10.95238095238095], [258.0, 29.10144927536231], [257.0, 65.74999999999999], [266.0, 1.0], [265.0, 32.64912280701755], [264.0, 8.999999999999993], [263.0, 11.03571428571429], [262.0, 183.25], [261.0, 372.0], [260.0, 11.411764705882353], [286.0, 0.8181818181818182], [287.0, 4.528455284552845], [284.0, 38.96774193548388], [274.0, 844.0], [272.0, 38.56521739130435], [283.0, 116.70833333333333], [281.0, 26.0], [280.0, 47.046875000000014], [279.0, 29.553571428571423], [278.0, 9.875], [277.0, 8.625], [276.0, 122.85714285714285], [296.0, 3.17948717948718], [303.0, 2.25], [299.0, 16.025210084033617], [298.0, 105.85714285714286], [297.0, 2.0], [294.0, 20.309523809523803], [293.0, 0.8571428571428572], [292.0, 2.0], [290.0, 94.26315789473682], [289.0, 15.000000000000002], [288.0, 14.222222222222225], [317.0, 211.25], [318.0, 1.0], [316.0, 8.9], [306.0, 1.2051282051282055], [305.0, 207.0], [304.0, 2.5], [315.0, 16.01785714285714], [314.0, 8.974358974358971], [313.0, 1.0], [312.0, 1.0], [311.0, 38.08333333333334], [310.0, 364.83333333333337], [309.0, 10.148936170212766], [308.0, 7.88372093023256], [334.0, 6.4090909090909065], [335.0, 59.13333333333333], [333.0, 14.672131147540982], [332.0, 25.903225806451612], [331.0, 26.22222222222222], [330.0, 1.0], [329.0, 1.0], [328.0, 396.0], [326.0, 26.976190476190478], [321.0, 94.96428571428572], [320.0, 143.83333333333331], [323.0, 2.0], [322.0, 16.790322580645157], [325.0, 4.432835820895524], [324.0, 1.8749999999999998], [350.0, 19.167883211678845], [351.0, 32.96428571428572], [349.0, 119.5], [339.0, 31.448979591836736], [337.0, 0.5], [336.0, 8.375000000000002], [346.0, 20.729729729729723], [345.0, 3.0], [344.0, 3.0], [343.0, 2.7777777777777772], [342.0, 30.390625000000007], [341.0, 2.0294117647058827], [340.0, 1.2857142857142858], [366.0, 1.1666666666666667], [367.0, 820.0], [364.0, 2.0], [363.0, 13.478260869565213], [362.0, 23.649350649350648], [361.0, 8.888888888888886], [360.0, 45.14285714285714], [357.0, 860.0], [352.0, 1.1060606060606064], [354.0, 861.0], [383.0, 1.1851851851851853], [382.0, 50.52941176470589], [377.0, 76.1363636363636], [376.0, 5.095238095238094], [375.0, 396.5], [374.0, 1.7222222222222219], [373.0, 1.74468085106383], [372.0, 36.56000000000001], [371.0, 37.10666666666667], [397.0, 47.83333333333334], [398.0, 0.857142857142857], [396.0, 20.777777777777782], [387.0, 38.41666666666667], [386.0, 3.722222222222222], [385.0, 2.8], [384.0, 1.689655172413793], [395.0, 20.94736842105263], [394.0, 32.66336633663365], [393.0, 0.7352941176470589], [392.0, 37.85], [390.0, 1.0], [389.0, 29.309090909090912], [388.0, 5.416666666666666], [415.0, 1.9166666666666667], [412.0, 842.0], [401.0, 53.051724137931046], [411.0, 39.942307692307686], [410.0, 9.928571428571429], [409.0, 5.96153846153846], [408.0, 6.630136986301371], [407.0, 5.461538461538462], [406.0, 439.625], [405.0, 6.857142857142859], [404.0, 4.0], [428.0, 18.23255813953488], [430.0, 5.1499999999999995], [431.0, 33.193877551020414], [429.0, 126.16666666666666], [427.0, 2.264705882352941], [426.0, 46.72058823529413], [423.0, 200.24999999999997], [417.0, 68.72972972972973], [416.0, 14.767676767676766], [419.0, 6.375], [418.0, 4.702702702702703], [422.0, 20.8125], [421.0, 1.4800000000000004], [420.0, 1.7647058823529407], [447.0, 33.52142857142857], [446.0, 150.53846153846155], [440.0, 718.0], [437.0, 247.66666666666666], [435.0, 19.142857142857142], [434.0, 17.458333333333332], [433.0, 17.624999999999996], [432.0, 16.333333333333332], [451.0, 29.5], [462.0, 26.509202453987747], [461.0, 57.684210526315795], [459.0, 14.0], [458.0, 89.82352941176471], [455.0, 116.51724137931036], [456.0, 234.25], [454.0, 39.333333333333336], [452.0, 29.75], [449.0, 29.6], [448.0, 112.6], [479.0, 2.4], [477.0, 1.2666666666666666], [475.0, 10.24657534246575], [474.0, 13.952380952380953], [473.0, 16.87096774193548], [471.0, 7.325581395348835], [470.0, 25.75362318840579], [469.0, 1.5833333333333335], [468.0, 2.0], [467.0, 9.629629629629632], [465.0, 10.8], [488.0, 1.0], [487.0, 0.0], [486.0, 0.7999999999999999], [485.0, 9.128205128205128], [484.0, 9.0], [483.0, 285.6923076923077], [482.0, 33.0897435897436], [481.0, 51.5], [480.0, 3.0000000000000004], [500.0, 29.76017658670673], [1.0, 456.0]], "isOverall": false, "label": "Client Login", "isController": false}, {"data": [[499.3956962207193, 29.772604700558304]], "isOverall": false, "label": "Client Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 28910.483333333334, "minX": 1.73644674E12, "maxY": 1.689238235E7, "series": [{"data": [[1.73644716E12, 1.6249185266666668E7], [1.73644734E12, 1.284490415E7], [1.73644686E12, 1.2622786333333334E7], [1.73644728E12, 1.628837015E7], [1.7364468E12, 1.3968688733333332E7], [1.73644698E12, 1.277029315E7], [1.73644692E12, 1.61967197E7], [1.7364471E12, 1.492104665E7], [1.73644704E12, 1.510765285E7], [1.73644722E12, 1.689238235E7], [1.73644674E12, 3257130.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73644716E12, 107467.9], [1.73644734E12, 90868.65], [1.73644686E12, 101424.56666666667], [1.73644728E12, 106607.53333333334], [1.7364468E12, 119272.93333333333], [1.73644698E12, 103025.9], [1.73644692E12, 110642.16666666667], [1.7364471E12, 110357.96666666666], [1.73644704E12, 110088.16666666667], [1.73644722E12, 111745.01666666666], [1.73644674E12, 28910.483333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73644734E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22.951130897554002, "minX": 1.73644674E12, "maxY": 40.803608112517125, "series": [{"data": [[1.73644716E12, 28.834091781040872], [1.73644734E12, 27.631903969406356], [1.73644686E12, 40.803608112517125], [1.73644728E12, 34.57385789211901], [1.7364468E12, 24.97307913113704], [1.73644698E12, 36.09243533604074], [1.73644692E12, 25.194707127139605], [1.7364471E12, 26.665842917532515], [1.73644704E12, 22.951130897554002], [1.73644722E12, 31.00052239288254], [1.73644674E12, 33.955323022192935]], "isOverall": false, "label": "Client Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73644734E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19.116051131334494, "minX": 1.73644674E12, "maxY": 30.2894762440767, "series": [{"data": [[1.73644716E12, 20.308522525197144], [1.73644734E12, 19.116051131334494], [1.73644686E12, 25.661223187429325], [1.73644728E12, 20.22904995168543], [1.7364468E12, 23.523043290703544], [1.73644698E12, 25.478986650593022], [1.73644692E12, 20.293752476555024], [1.7364471E12, 21.883750939652636], [1.73644704E12, 21.838339142841775], [1.73644722E12, 19.274937528274084], [1.73644674E12, 30.2894762440767]], "isOverall": false, "label": "Client Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73644734E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.1110850235089158, "minX": 1.73644674E12, "maxY": 15.047051737551387, "series": [{"data": [[1.73644716E12, 8.452730271725212], [1.73644734E12, 8.440756347154867], [1.73644686E12, 15.047051737551387], [1.73644728E12, 14.20800913798026], [1.7364468E12, 1.450425057815015], [1.73644698E12, 10.565564557590191], [1.73644692E12, 4.860891363180529], [1.7364471E12, 4.749767940130038], [1.73644704E12, 1.1110850235089158], [1.73644722E12, 11.61418323603548], [1.73644674E12, 4.218646211142131]], "isOverall": false, "label": "Client Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73644734E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 250.0, "minX": 1.73644674E12, "maxY": 8986.0, "series": [{"data": [[1.73644716E12, 2052.0], [1.73644734E12, 1241.0], [1.73644686E12, 8986.0], [1.73644728E12, 1895.0], [1.7364468E12, 1477.0], [1.73644698E12, 8099.0], [1.73644692E12, 1382.0], [1.7364471E12, 1744.0], [1.73644704E12, 2319.0], [1.73644722E12, 1673.0], [1.73644674E12, 2491.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73644716E12, 1162.8000000000002], [1.73644734E12, 939.0], [1.73644686E12, 1017.0], [1.73644728E12, 1166.0], [1.7364468E12, 955.0], [1.73644698E12, 1313.0], [1.73644692E12, 993.0], [1.7364471E12, 1165.0], [1.73644704E12, 1123.0], [1.73644722E12, 1135.0], [1.73644674E12, 1384.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73644716E12, 1750.8999999999987], [1.73644734E12, 1086.0], [1.73644686E12, 8427.799999999997], [1.73644728E12, 1667.0], [1.7364468E12, 1266.0], [1.73644698E12, 7817.26], [1.73644692E12, 1194.0], [1.7364471E12, 1563.0], [1.73644704E12, 1870.9600000000028], [1.73644722E12, 1544.0], [1.73644674E12, 2002.1799999999957]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73644716E12, 1344.8999999999996], [1.73644734E12, 993.8999999999996], [1.73644686E12, 1099.0], [1.73644728E12, 1320.0], [1.7364468E12, 1034.0], [1.73644698E12, 1429.6499999999996], [1.73644692E12, 1044.0], [1.7364471E12, 1325.0], [1.73644704E12, 1247.0], [1.73644722E12, 1311.0], [1.73644674E12, 1571.3000000000002]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73644716E12, 614.0], [1.73644734E12, 250.0], [1.73644686E12, 606.0], [1.73644728E12, 633.0], [1.7364468E12, 629.0], [1.73644698E12, 589.0], [1.73644692E12, 614.0], [1.7364471E12, 609.0], [1.73644704E12, 613.0], [1.73644722E12, 582.0], [1.73644674E12, 502.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73644716E12, 854.0], [1.73644734E12, 790.0], [1.73644686E12, 814.0], [1.73644728E12, 866.0], [1.7364468E12, 795.0], [1.73644698E12, 735.0], [1.73644692E12, 868.0], [1.7364471E12, 818.0], [1.73644704E12, 829.0], [1.73644722E12, 812.0], [1.73644674E12, 951.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73644734E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 223.0, "maxY": 8175.0, "series": [{"data": [[223.0, 5194.0], [300.0, 4439.0], [304.0, 5787.0], [349.0, 2906.0], [356.0, 3266.0], [379.0, 6373.0], [565.0, 1827.0], [693.0, 7670.5], [724.0, 2826.0], [752.0, 1270.0], [819.0, 818.0], [882.0, 1412.5], [923.0, 1292.0], [949.0, 7226.0], [1192.0, 4418.5], [1228.0, 1363.0], [1416.0, 1455.0], [1456.0, 8175.0], [1455.0, 1226.5], [1475.0, 1346.0], [1478.0, 1373.0], [1476.0, 1386.0], [1552.0, 3779.0], [1609.0, 2007.0], [1977.0, 1263.0], [1966.0, 1277.0], [2042.0, 1295.0], [2068.0, 839.0], [2306.0, 1299.0], [2486.0, 1241.0], [2700.0, 1215.0], [2864.0, 1239.5], [2912.0, 1328.5], [3084.0, 1336.0], [3220.0, 1078.0], [3414.0, 1593.0], [3386.0, 1361.0], [3582.0, 1091.5], [3624.0, 1472.0], [3688.0, 1765.0], [3932.0, 1121.0], [3840.0, 1545.0], [3984.0, 913.0], [4014.0, 1036.0], [4092.0, 967.0], [4030.0, 1114.0], [3978.0, 1167.0], [4040.0, 1284.0], [4026.0, 1152.5], [4054.0, 1176.0], [4292.0, 851.5], [4556.0, 983.5], [4580.0, 1024.0], [4452.0, 967.5], [4456.0, 862.0], [4360.0, 1055.5], [4396.0, 2381.0], [4512.0, 860.0], [4540.0, 1165.0], [4668.0, 980.0], [4656.0, 1515.0], [4860.0, 796.0], [4856.0, 1051.0], [4816.0, 1299.0], [4828.0, 1377.0], [4744.0, 1122.0], [5036.0, 871.0], [4892.0, 1028.0], [4896.0, 929.0], [5008.0, 980.0], [5096.0, 845.0], [5080.0, 1090.0], [5108.0, 990.0], [5368.0, 761.5], [5304.0, 798.5], [5160.0, 846.0], [5272.0, 924.5], [5480.0, 827.0], [5396.0, 799.0], [5380.0, 851.0], [5468.0, 917.5], [5464.0, 907.0], [5524.0, 834.0], [5552.0, 731.0], [5548.0, 959.5], [5536.0, 1004.0], [5420.0, 751.0], [5832.0, 756.0], [5732.0, 811.0], [5840.0, 795.0], [5860.0, 830.0], [5720.0, 837.0], [5716.0, 873.0], [5748.0, 754.0], [5828.0, 1068.0], [5808.0, 735.0], [6080.0, 737.0], [6116.0, 734.0], [6108.0, 798.0], [6104.0, 763.5], [6096.0, 803.0], [6092.0, 833.0], [6068.0, 855.0], [6060.0, 1065.0], [5944.0, 862.0], [5920.0, 789.0], [5940.0, 825.0], [6000.0, 802.0], [5992.0, 877.0], [5952.0, 1004.0], [5904.0, 1004.0], [6388.0, 708.0], [6148.0, 737.0], [6236.0, 930.0], [6320.0, 919.0], [6328.0, 837.0], [6312.0, 916.0], [6280.0, 769.0], [6176.0, 699.0], [6204.0, 784.5], [6340.0, 874.0], [6336.0, 756.0], [6612.0, 750.5], [6492.0, 712.0], [6488.0, 848.0], [6472.0, 749.0], [6512.0, 789.5], [6636.0, 694.0], [6532.0, 781.0], [6620.0, 812.0], [6632.0, 796.5], [6568.0, 690.0], [6564.0, 806.5], [6452.0, 1003.0], [6556.0, 825.0], [6496.0, 809.5], [6508.0, 848.0], [6668.0, 864.0], [6788.0, 710.0], [6888.0, 715.5], [6856.0, 774.0], [6828.0, 705.5], [6740.0, 801.0], [6800.0, 734.5], [6780.0, 727.0], [6840.0, 791.5], [6720.0, 758.5], [6736.0, 742.0], [6968.0, 782.0], [7028.0, 707.0], [7068.0, 826.0], [7152.0, 766.0], [6932.0, 796.0], [6948.0, 737.0], [7072.0, 764.0], [7380.0, 772.0], [7192.0, 736.5], [4193.0, 1001.5], [4233.0, 839.0], [4261.0, 1333.0], [4581.0, 988.0], [4461.0, 870.0], [4365.0, 822.0], [4525.0, 998.5], [4493.0, 1199.0], [4849.0, 942.0], [4649.0, 1396.0], [4717.0, 1291.5], [4609.0, 1338.0], [5041.0, 827.0], [4949.0, 811.0], [4909.0, 770.0], [5069.0, 1067.5], [4945.0, 990.5], [5133.0, 831.0], [5245.0, 859.0], [5329.0, 950.0], [5309.0, 932.5], [5225.0, 1018.0], [5181.0, 985.0], [5433.0, 842.5], [5577.0, 755.0], [5393.0, 801.0], [5457.0, 850.0], [5453.0, 994.0], [5445.0, 1030.0], [5589.0, 834.5], [5533.0, 887.0], [5629.0, 968.0], [5541.0, 908.0], [5429.0, 797.0], [5421.0, 882.0], [5585.0, 783.0], [5745.0, 810.5], [5665.0, 950.0], [5721.0, 752.5], [5709.0, 816.5], [5705.0, 835.0], [5657.0, 744.0], [5641.0, 817.0], [5797.0, 733.0], [5805.0, 789.0], [6005.0, 755.5], [5981.0, 740.0], [6033.0, 816.0], [5973.0, 821.0], [5965.0, 736.0], [5953.0, 790.5], [6141.0, 774.0], [6121.0, 881.0], [6089.0, 914.0], [6137.0, 844.0], [6065.0, 762.0], [6037.0, 794.0], [6061.0, 1033.0], [6169.0, 773.5], [6381.0, 893.5], [6285.0, 945.0], [6293.0, 835.0], [6149.0, 758.0], [6153.0, 783.0], [6157.0, 950.5], [6161.0, 779.0], [6369.0, 762.0], [6349.0, 775.0], [6205.0, 791.0], [6181.0, 779.5], [6341.0, 894.0], [6257.0, 838.0], [6221.0, 796.0], [6269.0, 901.0], [6633.0, 710.0], [6617.0, 852.0], [6637.0, 854.0], [6405.0, 913.5], [6409.0, 757.0], [6413.0, 777.0], [6485.0, 854.5], [6481.0, 760.0], [6465.0, 792.5], [6497.0, 808.0], [6521.0, 774.0], [6421.0, 921.0], [6597.0, 748.0], [6433.0, 817.0], [6453.0, 829.0], [6457.0, 790.0], [6581.0, 723.0], [6573.0, 770.0], [6545.0, 855.0], [6529.0, 781.0], [6653.0, 707.0], [6865.0, 842.0], [6849.0, 711.5], [6897.0, 830.5], [6901.0, 728.5], [6837.0, 733.0], [6829.0, 809.0], [6709.0, 807.0], [6689.0, 821.0], [6697.0, 854.0], [6713.0, 780.0], [6793.0, 762.0], [6937.0, 719.0], [7033.0, 790.5], [7001.0, 815.0], [6997.0, 765.0], [7057.0, 807.0], [6993.0, 729.0], [7269.0, 775.0], [7317.0, 768.5], [7281.0, 772.0], [7185.0, 784.0], [2151.0, 1115.0], [2067.0, 1186.0], [2195.0, 1254.5], [2185.0, 649.0], [2305.0, 1408.0], [2385.0, 1168.0], [2901.0, 1031.0], [2987.0, 1225.0], [3453.0, 1211.0], [3487.0, 862.0], [3483.0, 7935.0], [3647.0, 1280.5], [3749.0, 1344.0], [3763.0, 1474.5], [3755.0, 1012.0], [3851.0, 998.0], [3905.0, 1114.0], [3867.0, 1168.5], [4093.0, 1172.0], [4049.0, 1392.0], [4114.0, 960.0], [4326.0, 1325.0], [4602.0, 926.0], [4490.0, 843.0], [4510.0, 882.0], [4354.0, 1073.0], [4562.0, 1382.5], [4370.0, 1244.0], [4386.0, 1683.0], [4450.0, 1547.0], [4862.0, 832.0], [4734.0, 896.0], [4786.0, 956.0], [4834.0, 1030.0], [4662.0, 1175.0], [4746.0, 849.0], [4778.0, 1213.0], [4686.0, 834.0], [4730.0, 884.0], [5062.0, 869.5], [5106.0, 925.5], [4954.0, 807.0], [4970.0, 858.0], [5054.0, 795.0], [5362.0, 787.5], [5286.0, 972.0], [5190.0, 1013.0], [5138.0, 1303.0], [5586.0, 778.0], [5418.0, 781.5], [5410.0, 824.0], [5414.0, 834.5], [5442.0, 783.0], [5466.0, 901.0], [5630.0, 761.0], [5602.0, 863.0], [5518.0, 801.0], [5526.0, 885.0], [5546.0, 1072.0], [5534.0, 881.5], [5554.0, 775.0], [5566.0, 741.0], [5854.0, 753.0], [5710.0, 811.0], [5706.0, 752.0], [5838.0, 835.0], [5830.0, 778.0], [5862.0, 871.0], [5634.0, 825.0], [5670.0, 1176.0], [5674.0, 807.0], [5694.0, 898.0], [5874.0, 791.5], [5782.0, 861.0], [5778.0, 1064.0], [5786.0, 879.0], [5814.0, 762.0], [5702.0, 792.5], [5926.0, 785.0], [6126.0, 777.0], [6090.0, 771.0], [6106.0, 1001.5], [5950.0, 898.0], [6134.0, 782.5], [6034.0, 941.0], [6026.0, 967.0], [6142.0, 805.0], [6074.0, 746.0], [6070.0, 802.0], [5910.0, 838.0], [5918.0, 974.0], [5894.0, 784.0], [6006.0, 787.0], [5998.0, 777.0], [5974.0, 805.0], [6366.0, 722.0], [6358.0, 826.0], [6362.0, 883.0], [6398.0, 756.5], [6278.0, 760.0], [6334.0, 932.5], [6314.0, 860.5], [6146.0, 810.0], [6258.0, 963.0], [6262.0, 795.0], [6374.0, 796.0], [6390.0, 837.5], [6378.0, 878.0], [6370.0, 885.0], [6162.0, 767.0], [6150.0, 900.0], [6178.0, 946.0], [6190.0, 765.0], [6238.0, 851.5], [6234.0, 763.0], [6210.0, 871.0], [6250.0, 763.5], [6246.0, 825.0], [6462.0, 905.0], [6570.0, 850.0], [6590.0, 854.0], [6510.0, 776.0], [6490.0, 878.0], [6406.0, 758.0], [6422.0, 730.5], [6438.0, 808.0], [6602.0, 733.0], [6598.0, 754.0], [6618.0, 855.0], [6546.0, 880.5], [6542.0, 829.5], [6654.0, 795.0], [6530.0, 786.0], [6634.0, 679.0], [6718.0, 860.0], [6690.0, 718.0], [6710.0, 742.0], [6714.0, 778.5], [6894.0, 691.5], [6858.0, 725.5], [6830.0, 755.5], [6810.0, 769.0], [6818.0, 738.5], [6838.0, 750.0], [6834.0, 742.0], [6674.0, 775.0], [6754.0, 838.0], [6746.0, 693.0], [6758.0, 792.5], [6658.0, 786.0], [6878.0, 831.5], [7022.0, 725.0], [6986.0, 714.0], [7010.0, 701.0], [6990.0, 743.0], [6982.0, 779.5], [7038.0, 814.0], [6930.0, 770.0], [7142.0, 779.0], [6958.0, 778.0], [6978.0, 776.0], [7230.0, 763.0], [4255.0, 960.0], [4147.0, 919.0], [4335.0, 1255.0], [4563.0, 1029.0], [4439.0, 970.5], [4363.0, 1182.5], [4543.0, 843.0], [4583.0, 1128.0], [4819.0, 1004.0], [4627.0, 814.0], [4631.0, 924.0], [4787.0, 840.0], [4759.0, 809.0], [4803.0, 1065.0], [4751.0, 1326.0], [5111.0, 824.0], [5043.0, 793.0], [5015.0, 932.5], [5087.0, 791.0], [5091.0, 802.0], [4911.0, 825.5], [5083.0, 1314.0], [5351.0, 858.0], [5299.0, 800.0], [5219.0, 1066.0], [5311.0, 1021.0], [5291.0, 883.5], [5303.0, 1147.0], [5183.0, 922.0], [5167.0, 1114.0], [5127.0, 916.0], [5439.0, 857.0], [5411.0, 813.0], [5503.0, 816.5], [5499.0, 909.0], [5587.0, 1004.0], [5555.0, 738.0], [5511.0, 751.0], [5571.0, 842.0], [5579.0, 824.0], [5687.0, 737.5], [5663.0, 765.0], [5871.0, 799.5], [5835.0, 839.0], [5863.0, 965.0], [5723.0, 821.0], [5707.0, 1009.5], [5751.0, 759.0], [5635.0, 797.0], [5771.0, 933.0], [5887.0, 894.0], [6131.0, 859.0], [5971.0, 749.0], [5955.0, 846.0], [5991.0, 782.5], [6031.0, 773.5], [6139.0, 789.0], [6135.0, 853.0], [6019.0, 932.0], [6059.0, 746.0], [6039.0, 777.0], [6063.0, 889.0], [6087.0, 872.5], [5947.0, 889.0], [5939.0, 736.0], [6383.0, 762.0], [6275.0, 745.0], [6391.0, 888.0], [6387.0, 894.0], [6203.0, 917.5], [6187.0, 814.0], [6163.0, 768.5], [6179.0, 798.0], [6371.0, 765.0], [6315.0, 707.0], [6327.0, 791.0], [6303.0, 761.5], [6287.0, 910.0], [6295.0, 865.0], [6211.0, 902.0], [6239.0, 802.0], [6219.0, 822.5], [6427.0, 782.5], [6507.0, 761.0], [6415.0, 902.0], [6419.0, 762.0], [6495.0, 894.5], [6479.0, 763.0], [6531.0, 702.0], [6447.0, 795.5], [6603.0, 852.5], [6451.0, 793.0], [6431.0, 851.5], [6515.0, 789.0], [6647.0, 784.5], [6679.0, 843.0], [6783.0, 723.0], [6743.0, 703.0], [6727.0, 805.5], [6775.0, 692.5], [6683.0, 708.0], [6891.0, 730.0], [6787.0, 763.5], [6839.0, 779.0], [6847.0, 806.0], [6687.0, 852.0], [6711.0, 779.0], [7031.0, 699.5], [7047.0, 683.5], [7011.0, 686.0], [6975.0, 690.0], [7075.0, 779.5], [7275.0, 770.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[223.0, 601.0], [268.0, 1328.0], [300.0, 1155.0], [304.0, 1360.0], [349.0, 1010.5], [356.0, 491.0], [379.0, 1168.0], [565.0, 1.0], [693.0, 993.0], [724.0, 536.0], [752.0, 1.0], [819.0, 147.5], [882.0, 1.0], [923.0, 53.0], [949.0, 318.5], [1192.0, 204.0], [1228.0, 1.0], [1416.0, 142.0], [1456.0, 215.0], [1455.0, 1.0], [1475.0, 1.0], [1478.0, 1.0], [1476.0, 1.0], [1552.0, 236.0], [1609.0, 1.0], [1977.0, 2.0], [1966.0, 1.0], [2042.0, 1.0], [2068.0, 30.0], [2306.0, 1.0], [2486.0, 1.0], [2700.0, 1.0], [2864.0, 1.0], [2912.0, 1.0], [3084.0, 3.0], [3220.0, 1.0], [3414.0, 2.0], [3386.0, 5.0], [3582.0, 1.0], [3624.0, 50.0], [3688.0, 20.0], [3932.0, 1.0], [3840.0, 19.0], [3984.0, 1.0], [4014.0, 2.0], [4092.0, 2.0], [4030.0, 1.0], [3978.0, 1.0], [4040.0, 9.0], [4026.0, 10.0], [4054.0, 13.0], [4292.0, 2.0], [4556.0, 1.0], [4580.0, 2.0], [4452.0, 2.0], [4456.0, 1.0], [4360.0, 4.0], [4396.0, 2.0], [4512.0, 1.0], [4540.0, 12.0], [4668.0, 2.0], [4656.0, 29.0], [4860.0, 1.0], [4856.0, 6.0], [4816.0, 33.0], [4828.0, 24.0], [4744.0, 21.0], [5036.0, 1.0], [4892.0, 8.0], [4896.0, 1.0], [5008.0, 6.0], [5096.0, 3.0], [5080.0, 5.0], [5108.0, 7.0], [5368.0, 1.0], [5304.0, 1.0], [5160.0, 1.0], [5272.0, 5.0], [5480.0, 3.0], [5396.0, 2.0], [5380.0, 11.0], [5468.0, 4.0], [5464.0, 5.0], [5524.0, 1.0], [5552.0, 1.0], [5548.0, 1.0], [5536.0, 10.0], [5420.0, 1.0], [5832.0, 1.0], [5732.0, 1.0], [5840.0, 1.0], [5860.0, 2.0], [5720.0, 1.0], [5716.0, 2.0], [5748.0, 1.0], [5828.0, 11.0], [5808.0, 1.0], [6080.0, 1.0], [6116.0, 1.0], [6108.0, 3.0], [6104.0, 1.0], [6096.0, 1.0], [6092.0, 7.0], [6068.0, 5.0], [6060.0, 9.0], [5944.0, 3.0], [5920.0, 2.0], [5940.0, 1.0], [6000.0, 1.0], [5992.0, 13.0], [5952.0, 10.0], [5904.0, 7.0], [6388.0, 1.0], [6148.0, 1.0], [6236.0, 7.0], [6320.0, 1.0], [6328.0, 8.0], [6312.0, 1.0], [6280.0, 1.0], [6176.0, 3.0], [6204.0, 1.0], [6340.0, 11.0], [6336.0, 4.0], [6612.0, 1.0], [6492.0, 1.0], [6488.0, 1.0], [6472.0, 6.0], [6512.0, 5.0], [6636.0, 1.0], [6532.0, 4.0], [6620.0, 8.0], [6632.0, 5.0], [6568.0, 1.0], [6564.0, 8.0], [6452.0, 7.0], [6556.0, 4.0], [6496.0, 3.0], [6508.0, 8.0], [6668.0, 3.0], [6788.0, 1.0], [6888.0, 1.0], [6856.0, 3.0], [6828.0, 1.0], [6740.0, 1.0], [6800.0, 2.0], [6780.0, 3.0], [6840.0, 3.0], [6720.0, 4.0], [6736.0, 5.0], [6968.0, 1.0], [7028.0, 1.0], [7068.0, 1.0], [7152.0, 2.0], [6932.0, 5.0], [6948.0, 3.0], [7072.0, 3.0], [7380.0, 2.0], [7192.0, 3.0], [4193.0, 2.0], [4233.0, 1.0], [4261.0, 7.0], [4581.0, 2.0], [4461.0, 1.0], [4365.0, 1.0], [4525.0, 6.0], [4493.0, 17.0], [4849.0, 1.0], [4649.0, 14.0], [4717.0, 17.0], [4609.0, 16.0], [5041.0, 1.0], [4949.0, 1.0], [4909.0, 1.0], [5069.0, 6.0], [4945.0, 14.0], [5133.0, 1.0], [5245.0, 1.0], [5329.0, 4.0], [5309.0, 1.0], [5225.0, 1.0], [5181.0, 8.0], [5433.0, 1.0], [5577.0, 1.0], [5393.0, 1.0], [5457.0, 1.0], [5453.0, 1.0], [5445.0, 17.0], [5589.0, 5.0], [5533.0, 1.0], [5629.0, 6.0], [5541.0, 6.0], [5429.0, 1.0], [5421.0, 4.0], [5585.0, 1.0], [5745.0, 1.0], [5665.0, 5.0], [5721.0, 1.0], [5709.0, 3.0], [5705.0, 7.0], [5657.0, 1.0], [5641.0, 1.0], [5797.0, 1.0], [5805.0, 1.0], [6005.0, 1.0], [5981.0, 1.0], [6033.0, 2.0], [5973.0, 1.0], [5965.0, 1.0], [5953.0, 1.0], [6141.0, 1.0], [6121.0, 11.0], [6089.0, 11.0], [6137.0, 11.0], [6065.0, 1.0], [6037.0, 3.0], [6061.0, 7.0], [6169.0, 1.0], [6381.0, 1.0], [6285.0, 4.0], [6293.0, 10.0], [6149.0, 1.0], [6153.0, 1.0], [6157.0, 1.0], [6161.0, 1.0], [6369.0, 1.0], [6349.0, 1.0], [6205.0, 1.0], [6181.0, 10.0], [6341.0, 3.0], [6257.0, 1.0], [6221.0, 5.0], [6269.0, 1.0], [6633.0, 1.0], [6617.0, 1.0], [6637.0, 1.0], [6405.0, 1.0], [6409.0, 3.0], [6413.0, 5.0], [6485.0, 2.0], [6481.0, 4.0], [6465.0, 6.0], [6497.0, 8.0], [6521.0, 4.0], [6421.0, 1.0], [6597.0, 2.0], [6433.0, 5.0], [6453.0, 6.0], [6457.0, 6.0], [6581.0, 1.0], [6573.0, 4.0], [6545.0, 1.0], [6529.0, 3.0], [6653.0, 1.0], [6865.0, 1.0], [6849.0, 1.0], [6897.0, 1.0], [6901.0, 3.0], [6837.0, 1.0], [6829.0, 6.0], [6709.0, 1.0], [6689.0, 2.0], [6697.0, 2.0], [6713.0, 2.0], [6793.0, 4.0], [6937.0, 1.0], [7033.0, 1.0], [7001.0, 1.0], [6997.0, 2.0], [7057.0, 2.0], [6993.0, 2.0], [7269.0, 2.0], [7317.0, 3.0], [7281.0, 2.0], [7185.0, 2.0], [2151.0, 2.0], [2067.0, 1.0], [2195.0, 1.0], [2185.0, 2.0], [2305.0, 1.0], [2385.0, 1.0], [2901.0, 2.0], [2987.0, 1.0], [3453.0, 1.0], [3487.0, 10.0], [3483.0, 21.0], [3647.0, 6.0], [3749.0, 2.0], [3763.0, 25.0], [3755.0, 23.0], [3851.0, 3.0], [3905.0, 6.0], [3867.0, 7.0], [4093.0, 6.0], [4049.0, 47.0], [4114.0, 1.0], [4326.0, 9.0], [4602.0, 2.0], [4490.0, 1.0], [4510.0, 1.0], [4354.0, 1.0], [4562.0, 15.0], [4370.0, 22.0], [4386.0, 44.0], [4450.0, 18.0], [4862.0, 1.0], [4734.0, 1.0], [4786.0, 3.0], [4834.0, 1.0], [4662.0, 11.0], [4746.0, 1.0], [4778.0, 20.0], [4686.0, 1.0], [4730.0, 1.0], [5062.0, 5.0], [5106.0, 1.0], [4954.0, 1.0], [4970.0, 2.0], [5054.0, 1.0], [5362.0, 1.0], [5286.0, 11.0], [5190.0, 4.0], [5138.0, 18.0], [5586.0, 1.0], [5418.0, 1.0], [5410.0, 1.0], [5414.0, 1.0], [5442.0, 1.0], [5466.0, 9.0], [5630.0, 1.0], [5602.0, 2.0], [5518.0, 1.0], [5526.0, 6.0], [5546.0, 2.0], [5534.0, 1.0], [5554.0, 1.0], [5566.0, 1.0], [5854.0, 1.0], [5710.0, 1.0], [5706.0, 1.0], [5838.0, 1.0], [5830.0, 3.0], [5862.0, 2.0], [5634.0, 1.0], [5670.0, 11.0], [5674.0, 3.0], [5694.0, 8.0], [5874.0, 1.0], [5782.0, 2.0], [5778.0, 1.0], [5786.0, 1.0], [5814.0, 1.0], [5702.0, 1.0], [5926.0, 1.0], [6126.0, 1.0], [6090.0, 1.0], [6106.0, 9.0], [5950.0, 2.0], [6134.0, 2.0], [6034.0, 4.0], [6026.0, 9.0], [6142.0, 5.0], [6074.0, 1.0], [6070.0, 1.0], [5910.0, 1.0], [5918.0, 8.0], [5894.0, 1.0], [6006.0, 2.0], [5998.0, 1.0], [5974.0, 2.0], [6366.0, 1.0], [6358.0, 2.0], [6362.0, 13.0], [6398.0, 1.0], [6278.0, 1.0], [6334.0, 8.0], [6314.0, 9.0], [6146.0, 1.0], [6258.0, 1.0], [6262.0, 2.0], [6374.0, 1.0], [6390.0, 8.0], [6378.0, 9.0], [6370.0, 1.0], [6162.0, 1.0], [6150.0, 9.0], [6178.0, 7.0], [6190.0, 1.0], [6238.0, 1.0], [6234.0, 1.0], [6210.0, 2.0], [6250.0, 1.0], [6246.0, 5.0], [6462.0, 1.0], [6570.0, 8.0], [6590.0, 1.0], [6510.0, 1.0], [6490.0, 4.0], [6406.0, 3.0], [6422.0, 1.0], [6438.0, 2.0], [6602.0, 1.0], [6598.0, 3.0], [6618.0, 7.0], [6546.0, 2.0], [6542.0, 4.0], [6654.0, 1.0], [6530.0, 5.0], [6634.0, 4.0], [6718.0, 1.0], [6690.0, 1.0], [6710.0, 3.0], [6714.0, 2.0], [6894.0, 1.0], [6858.0, 1.0], [6830.0, 3.0], [6810.0, 3.0], [6818.0, 3.0], [6838.0, 2.0], [6834.0, 4.0], [6674.0, 1.0], [6754.0, 2.0], [6746.0, 2.0], [6758.0, 3.0], [6658.0, 4.0], [6878.0, 1.0], [7022.0, 2.0], [6986.0, 1.0], [7010.0, 1.0], [6990.0, 4.0], [6982.0, 1.0], [7038.0, 1.0], [6930.0, 3.0], [7142.0, 2.0], [6958.0, 3.0], [6978.0, 4.0], [7230.0, 2.0], [4255.0, 1.0], [4147.0, 1.0], [4335.0, 11.0], [4563.0, 2.0], [4439.0, 1.0], [4363.0, 7.0], [4543.0, 1.0], [4583.0, 19.0], [4819.0, 12.0], [4627.0, 1.0], [4631.0, 1.0], [4787.0, 1.0], [4759.0, 1.0], [4803.0, 1.0], [4751.0, 31.0], [5111.0, 1.0], [5043.0, 1.0], [5015.0, 7.0], [5087.0, 1.0], [5091.0, 4.0], [4911.0, 2.0], [5083.0, 15.0], [5351.0, 3.0], [5299.0, 1.0], [5219.0, 9.0], [5311.0, 1.0], [5291.0, 1.0], [5303.0, 9.0], [5183.0, 6.0], [5167.0, 19.0], [5127.0, 9.0], [5439.0, 1.0], [5411.0, 1.0], [5503.0, 1.0], [5499.0, 1.0], [5587.0, 3.0], [5555.0, 1.0], [5511.0, 1.0], [5571.0, 1.0], [5579.0, 1.0], [5687.0, 1.0], [5663.0, 1.0], [5871.0, 2.0], [5835.0, 3.0], [5863.0, 14.0], [5723.0, 2.0], [5707.0, 9.0], [5751.0, 1.0], [5635.0, 1.0], [5771.0, 10.0], [5887.0, 6.0], [6131.0, 4.0], [5971.0, 1.0], [5955.0, 1.0], [5991.0, 1.0], [6031.0, 3.0], [6139.0, 1.0], [6135.0, 5.0], [6019.0, 1.0], [6059.0, 1.0], [6039.0, 4.0], [6063.0, 4.0], [6087.0, 1.0], [5947.0, 12.0], [5939.0, 1.0], [6383.0, 1.0], [6275.0, 1.0], [6391.0, 1.0], [6387.0, 1.0], [6203.0, 1.0], [6187.0, 6.0], [6163.0, 1.0], [6179.0, 1.0], [6371.0, 1.0], [6315.0, 1.0], [6327.0, 6.0], [6303.0, 1.0], [6287.0, 1.0], [6295.0, 9.0], [6211.0, 5.0], [6239.0, 1.0], [6219.0, 1.0], [6427.0, 5.0], [6507.0, 2.0], [6415.0, 1.0], [6419.0, 5.0], [6495.0, 1.0], [6479.0, 1.0], [6531.0, 4.0], [6447.0, 5.0], [6603.0, 7.0], [6451.0, 4.0], [6431.0, 8.0], [6515.0, 11.0], [6647.0, 6.0], [6679.0, 1.0], [6783.0, 1.0], [6743.0, 1.0], [6727.0, 6.0], [6775.0, 1.0], [6683.0, 1.0], [6891.0, 1.0], [6787.0, 2.0], [6839.0, 1.0], [6847.0, 5.0], [6687.0, 1.0], [6711.0, 4.0], [7031.0, 1.0], [7047.0, 1.0], [7011.0, 1.0], [6975.0, 1.0], [7075.0, 1.0], [7275.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7380.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 223.0, "maxY": 8173.0, "series": [{"data": [[223.0, 4703.5], [300.0, 3362.0], [304.0, 4439.0], [349.0, 1867.0], [356.0, 2886.0], [379.0, 4948.0], [565.0, 1827.0], [693.0, 7664.5], [724.0, 2387.0], [752.0, 1270.0], [819.0, 816.0], [882.0, 1411.5], [923.0, 1267.0], [949.0, 6959.0], [1192.0, 4304.5], [1228.0, 1363.0], [1416.0, 1371.0], [1456.0, 8173.0], [1455.0, 1226.5], [1475.0, 1346.0], [1478.0, 1373.0], [1476.0, 1386.0], [1552.0, 3541.0], [1609.0, 2006.0], [1977.0, 1263.0], [1966.0, 1276.5], [2042.0, 1295.0], [2068.0, 838.0], [2306.0, 1299.0], [2486.0, 1241.0], [2700.0, 1215.0], [2864.0, 1239.5], [2912.0, 1328.5], [3084.0, 1335.5], [3220.0, 1078.0], [3414.0, 1592.0], [3386.0, 1353.0], [3582.0, 1091.5], [3624.0, 1459.0], [3688.0, 1757.0], [3932.0, 1121.0], [3840.0, 1488.0], [3984.0, 912.5], [4014.0, 1036.0], [4092.0, 966.5], [4030.0, 1114.0], [3978.0, 1166.0], [4040.0, 1269.5], [4026.0, 1138.0], [4054.0, 1174.0], [4292.0, 851.0], [4556.0, 982.0], [4580.0, 1024.0], [4452.0, 967.5], [4456.0, 861.0], [4360.0, 1054.0], [4396.0, 2379.5], [4512.0, 860.0], [4540.0, 1162.0], [4668.0, 980.0], [4656.0, 1515.0], [4860.0, 796.0], [4856.0, 1043.0], [4816.0, 1283.5], [4828.0, 1349.0], [4744.0, 1116.5], [5036.0, 869.0], [4892.0, 996.0], [4896.0, 929.0], [5008.0, 979.0], [5096.0, 844.0], [5080.0, 1089.0], [5108.0, 987.0], [5368.0, 761.5], [5304.0, 797.5], [5160.0, 846.0], [5272.0, 922.5], [5480.0, 827.0], [5396.0, 798.5], [5380.0, 842.5], [5468.0, 908.5], [5464.0, 905.0], [5524.0, 834.0], [5552.0, 731.0], [5548.0, 959.0], [5536.0, 992.0], [5420.0, 751.0], [5832.0, 755.5], [5732.0, 809.0], [5840.0, 794.0], [5860.0, 828.0], [5720.0, 837.0], [5716.0, 872.0], [5748.0, 753.5], [5828.0, 1063.0], [5808.0, 734.0], [6080.0, 737.0], [6116.0, 733.0], [6108.0, 798.0], [6104.0, 762.5], [6096.0, 803.0], [6092.0, 822.0], [6068.0, 848.0], [6060.0, 1056.5], [5944.0, 859.0], [5920.0, 784.0], [5940.0, 821.0], [6000.0, 802.0], [5992.0, 868.0], [5952.0, 997.0], [5904.0, 999.0], [6388.0, 707.0], [6148.0, 736.0], [6236.0, 924.0], [6320.0, 919.0], [6328.0, 820.5], [6312.0, 916.0], [6280.0, 769.0], [6176.0, 699.0], [6204.0, 783.5], [6340.0, 868.0], [6336.0, 748.0], [6612.0, 750.0], [6492.0, 711.0], [6488.0, 848.0], [6472.0, 744.0], [6512.0, 782.5], [6636.0, 694.0], [6532.0, 776.0], [6620.0, 809.0], [6632.0, 795.0], [6568.0, 690.0], [6564.0, 802.0], [6452.0, 990.0], [6556.0, 825.0], [6496.0, 808.0], [6508.0, 841.0], [6668.0, 862.0], [6788.0, 710.0], [6888.0, 715.0], [6856.0, 772.0], [6828.0, 705.5], [6740.0, 800.5], [6800.0, 734.0], [6780.0, 722.0], [6840.0, 787.5], [6720.0, 755.0], [6736.0, 733.0], [6968.0, 782.0], [7028.0, 706.5], [7068.0, 826.0], [7152.0, 766.0], [6932.0, 791.5], [6948.0, 733.5], [7072.0, 762.0], [7380.0, 772.0], [7192.0, 732.0], [4193.0, 1001.0], [4233.0, 838.0], [4261.0, 1329.0], [4581.0, 987.0], [4461.0, 869.0], [4365.0, 821.0], [4525.0, 991.5], [4493.0, 1168.0], [4849.0, 942.0], [4649.0, 1366.0], [4717.0, 1280.5], [4609.0, 1322.0], [5041.0, 827.0], [4949.0, 809.0], [4909.0, 770.0], [5069.0, 1066.0], [4945.0, 984.0], [5133.0, 831.0], [5245.0, 858.5], [5329.0, 947.0], [5309.0, 929.5], [5225.0, 1012.0], [5181.0, 981.0], [5433.0, 842.5], [5577.0, 755.0], [5393.0, 801.0], [5457.0, 848.5], [5453.0, 993.0], [5445.0, 1026.0], [5589.0, 827.5], [5533.0, 879.5], [5629.0, 958.5], [5541.0, 906.0], [5429.0, 797.0], [5421.0, 876.0], [5585.0, 783.0], [5745.0, 810.5], [5665.0, 948.0], [5721.0, 752.5], [5709.0, 810.5], [5705.0, 831.0], [5657.0, 744.0], [5641.0, 817.0], [5797.0, 733.0], [5805.0, 789.0], [6005.0, 755.5], [5981.0, 740.0], [6033.0, 816.0], [5973.0, 820.0], [5965.0, 736.0], [5953.0, 790.0], [6141.0, 771.0], [6121.0, 876.0], [6089.0, 903.0], [6137.0, 841.0], [6065.0, 762.0], [6037.0, 781.0], [6061.0, 1016.0], [6169.0, 773.0], [6381.0, 893.0], [6285.0, 944.0], [6293.0, 833.0], [6149.0, 758.0], [6153.0, 783.0], [6157.0, 948.5], [6161.0, 779.0], [6369.0, 762.0], [6349.0, 775.0], [6205.0, 791.0], [6181.0, 772.5], [6341.0, 889.0], [6257.0, 837.5], [6221.0, 795.5], [6269.0, 900.5], [6633.0, 708.0], [6617.0, 851.5], [6637.0, 854.0], [6405.0, 912.0], [6409.0, 752.0], [6413.0, 776.5], [6485.0, 852.0], [6481.0, 758.0], [6465.0, 788.0], [6497.0, 802.0], [6521.0, 766.0], [6421.0, 921.0], [6597.0, 746.5], [6433.0, 817.0], [6453.0, 827.5], [6457.0, 788.0], [6581.0, 723.0], [6573.0, 769.5], [6545.0, 855.0], [6529.0, 774.0], [6653.0, 706.0], [6865.0, 842.0], [6849.0, 711.0], [6897.0, 830.5], [6901.0, 726.0], [6837.0, 733.0], [6829.0, 805.0], [6709.0, 806.0], [6689.0, 819.0], [6697.0, 853.0], [6713.0, 778.0], [6793.0, 759.0], [6937.0, 718.0], [7033.0, 790.5], [7001.0, 815.0], [6997.0, 765.0], [7057.0, 806.0], [6993.0, 729.0], [7269.0, 773.0], [7317.0, 766.0], [7281.0, 772.0], [7185.0, 782.0], [2151.0, 1114.0], [2067.0, 1185.5], [2195.0, 1254.5], [2185.0, 649.0], [2305.0, 1407.0], [2385.0, 1168.0], [2901.0, 1028.0], [2987.0, 1224.0], [3453.0, 1211.0], [3487.0, 861.0], [3483.0, 7917.0], [3647.0, 1277.0], [3749.0, 1344.0], [3763.0, 1377.5], [3755.0, 1004.0], [3851.0, 988.5], [3905.0, 1112.0], [3867.0, 1142.5], [4093.0, 1171.0], [4049.0, 1375.0], [4114.0, 959.0], [4326.0, 1298.0], [4602.0, 925.5], [4490.0, 843.0], [4510.0, 882.0], [4354.0, 1073.0], [4562.0, 1333.5], [4370.0, 1237.5], [4386.0, 1642.0], [4450.0, 1547.0], [4862.0, 832.0], [4734.0, 896.0], [4786.0, 952.0], [4834.0, 1030.0], [4662.0, 1162.0], [4746.0, 848.0], [4778.0, 1191.0], [4686.0, 833.5], [4730.0, 884.0], [5062.0, 863.5], [5106.0, 925.0], [4954.0, 807.0], [4970.0, 857.5], [5054.0, 794.5], [5362.0, 787.5], [5286.0, 953.0], [5190.0, 1012.0], [5138.0, 1298.0], [5586.0, 777.0], [5418.0, 780.5], [5410.0, 824.0], [5414.0, 834.0], [5442.0, 782.0], [5466.0, 874.0], [5630.0, 760.0], [5602.0, 863.0], [5518.0, 800.0], [5526.0, 883.0], [5546.0, 1066.0], [5534.0, 880.5], [5554.0, 775.0], [5566.0, 740.5], [5854.0, 753.0], [5710.0, 811.0], [5706.0, 752.0], [5838.0, 832.0], [5830.0, 770.5], [5862.0, 869.5], [5634.0, 825.0], [5670.0, 1163.0], [5674.0, 805.0], [5694.0, 898.0], [5874.0, 791.0], [5782.0, 856.0], [5778.0, 1063.0], [5786.0, 879.0], [5814.0, 761.0], [5702.0, 792.0], [5926.0, 785.0], [6126.0, 777.0], [6090.0, 771.0], [6106.0, 1001.5], [5950.0, 891.0], [6134.0, 780.5], [6034.0, 937.0], [6026.0, 966.0], [6142.0, 804.0], [6074.0, 746.0], [6070.0, 802.0], [5910.0, 837.0], [5918.0, 974.0], [5894.0, 780.5], [6006.0, 785.0], [5998.0, 777.0], [5974.0, 804.0], [6366.0, 722.0], [6358.0, 826.0], [6362.0, 876.0], [6398.0, 756.0], [6278.0, 760.0], [6334.0, 925.0], [6314.0, 852.5], [6146.0, 808.0], [6258.0, 963.0], [6262.0, 794.0], [6374.0, 794.0], [6390.0, 832.0], [6378.0, 875.0], [6370.0, 884.0], [6162.0, 767.0], [6150.0, 897.5], [6178.0, 944.5], [6190.0, 765.0], [6238.0, 851.0], [6234.0, 762.5], [6210.0, 870.5], [6250.0, 763.5], [6246.0, 818.0], [6462.0, 904.0], [6570.0, 849.0], [6590.0, 854.0], [6510.0, 776.0], [6490.0, 874.0], [6406.0, 756.0], [6422.0, 730.0], [6438.0, 805.5], [6602.0, 733.0], [6598.0, 749.5], [6618.0, 847.5], [6546.0, 879.0], [6542.0, 829.0], [6654.0, 794.0], [6530.0, 772.0], [6634.0, 677.0], [6718.0, 860.0], [6690.0, 718.0], [6710.0, 741.0], [6714.0, 775.0], [6894.0, 691.0], [6858.0, 725.0], [6830.0, 753.0], [6810.0, 768.0], [6818.0, 738.0], [6838.0, 750.0], [6834.0, 739.0], [6674.0, 774.0], [6754.0, 838.0], [6746.0, 692.0], [6758.0, 790.5], [6658.0, 782.5], [6878.0, 831.0], [7022.0, 724.0], [6986.0, 714.0], [7010.0, 700.0], [6990.0, 736.0], [6982.0, 779.0], [7038.0, 813.5], [6930.0, 768.0], [7142.0, 773.5], [6958.0, 771.5], [6978.0, 773.0], [7230.0, 762.0], [4255.0, 959.5], [4147.0, 919.0], [4335.0, 1242.5], [4563.0, 1029.0], [4439.0, 970.5], [4363.0, 1171.0], [4543.0, 843.0], [4583.0, 1112.0], [4819.0, 1004.0], [4627.0, 813.5], [4631.0, 924.0], [4787.0, 839.5], [4759.0, 808.5], [4803.0, 1065.0], [4751.0, 1298.0], [5111.0, 824.0], [5043.0, 792.5], [5015.0, 927.5], [5087.0, 791.0], [5091.0, 800.0], [4911.0, 822.5], [5083.0, 1309.0], [5351.0, 854.0], [5299.0, 799.0], [5219.0, 1059.0], [5311.0, 1020.0], [5291.0, 883.5], [5303.0, 1139.0], [5183.0, 905.0], [5167.0, 1109.0], [5127.0, 909.0], [5439.0, 856.0], [5411.0, 813.0], [5503.0, 815.0], [5499.0, 909.0], [5587.0, 999.0], [5555.0, 737.0], [5511.0, 751.0], [5571.0, 838.5], [5579.0, 823.5], [5687.0, 737.0], [5663.0, 765.0], [5871.0, 798.5], [5835.0, 839.0], [5863.0, 952.5], [5723.0, 820.5], [5707.0, 1000.5], [5751.0, 759.0], [5635.0, 797.0], [5771.0, 927.5], [5887.0, 890.0], [6131.0, 856.0], [5971.0, 749.0], [5955.0, 846.0], [5991.0, 781.5], [6031.0, 772.5], [6139.0, 788.0], [6135.0, 852.0], [6019.0, 929.0], [6059.0, 746.0], [6039.0, 761.0], [6063.0, 884.0], [6087.0, 872.0], [5947.0, 884.0], [5939.0, 736.0], [6383.0, 762.0], [6275.0, 745.0], [6391.0, 887.5], [6387.0, 894.0], [6203.0, 917.5], [6187.0, 807.0], [6163.0, 767.5], [6179.0, 798.0], [6371.0, 764.0], [6315.0, 707.0], [6327.0, 787.0], [6303.0, 761.5], [6287.0, 909.5], [6295.0, 858.5], [6211.0, 898.0], [6239.0, 802.0], [6219.0, 821.0], [6427.0, 782.5], [6507.0, 761.0], [6415.0, 902.0], [6419.0, 760.0], [6495.0, 892.0], [6479.0, 762.0], [6531.0, 693.0], [6447.0, 794.0], [6603.0, 845.0], [6451.0, 791.0], [6431.0, 847.0], [6515.0, 786.0], [6647.0, 778.5], [6679.0, 839.0], [6783.0, 723.0], [6743.0, 702.0], [6727.0, 803.5], [6775.0, 692.0], [6683.0, 708.0], [6891.0, 729.0], [6787.0, 763.5], [6839.0, 778.0], [6847.0, 804.0], [6687.0, 852.0], [6711.0, 771.0], [7031.0, 698.5], [7047.0, 682.5], [7011.0, 686.0], [6975.0, 689.0], [7075.0, 779.5], [7275.0, 766.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[223.0, 0.0], [268.0, 0.0], [300.0, 0.0], [304.0, 0.0], [349.0, 0.0], [356.0, 0.0], [379.0, 0.0], [565.0, 0.0], [693.0, 0.0], [724.0, 0.0], [752.0, 0.0], [819.0, 0.0], [882.0, 0.0], [923.0, 0.0], [949.0, 0.0], [1192.0, 0.0], [1228.0, 0.0], [1416.0, 0.0], [1456.0, 0.0], [1455.0, 0.0], [1475.0, 0.0], [1478.0, 0.0], [1476.0, 0.0], [1552.0, 0.0], [1609.0, 0.0], [1977.0, 0.0], [1966.0, 0.0], [2042.0, 0.0], [2068.0, 0.0], [2306.0, 0.0], [2486.0, 0.0], [2700.0, 0.0], [2864.0, 0.0], [2912.0, 0.0], [3084.0, 0.0], [3220.0, 0.0], [3414.0, 0.0], [3386.0, 0.0], [3582.0, 0.0], [3624.0, 0.0], [3688.0, 0.0], [3932.0, 0.0], [3840.0, 0.0], [3984.0, 0.0], [4014.0, 0.0], [4092.0, 0.0], [4030.0, 0.0], [3978.0, 0.0], [4040.0, 0.0], [4026.0, 0.0], [4054.0, 0.0], [4292.0, 0.0], [4556.0, 0.0], [4580.0, 0.0], [4452.0, 0.0], [4456.0, 0.0], [4360.0, 0.0], [4396.0, 0.0], [4512.0, 0.0], [4540.0, 0.0], [4668.0, 0.0], [4656.0, 0.0], [4860.0, 0.0], [4856.0, 0.0], [4816.0, 0.0], [4828.0, 0.0], [4744.0, 0.0], [5036.0, 0.0], [4892.0, 0.0], [4896.0, 0.0], [5008.0, 0.0], [5096.0, 0.0], [5080.0, 0.0], [5108.0, 0.0], [5368.0, 0.0], [5304.0, 0.0], [5160.0, 0.0], [5272.0, 0.0], [5480.0, 0.0], [5396.0, 0.0], [5380.0, 0.0], [5468.0, 0.0], [5464.0, 0.0], [5524.0, 0.0], [5552.0, 0.0], [5548.0, 0.0], [5536.0, 0.0], [5420.0, 0.0], [5832.0, 0.0], [5732.0, 0.0], [5840.0, 0.0], [5860.0, 0.0], [5720.0, 0.0], [5716.0, 0.0], [5748.0, 0.0], [5828.0, 0.0], [5808.0, 0.0], [6080.0, 0.0], [6116.0, 0.0], [6108.0, 0.0], [6104.0, 0.0], [6096.0, 0.0], [6092.0, 0.0], [6068.0, 0.0], [6060.0, 0.0], [5944.0, 0.0], [5920.0, 0.0], [5940.0, 0.0], [6000.0, 0.0], [5992.0, 0.0], [5952.0, 0.0], [5904.0, 0.0], [6388.0, 0.0], [6148.0, 0.0], [6236.0, 0.0], [6320.0, 0.0], [6328.0, 0.0], [6312.0, 0.0], [6280.0, 0.0], [6176.0, 0.0], [6204.0, 0.0], [6340.0, 0.0], [6336.0, 0.0], [6612.0, 0.0], [6492.0, 0.0], [6488.0, 0.0], [6472.0, 0.0], [6512.0, 0.0], [6636.0, 0.0], [6532.0, 0.0], [6620.0, 0.0], [6632.0, 0.0], [6568.0, 0.0], [6564.0, 0.0], [6452.0, 0.0], [6556.0, 0.0], [6496.0, 0.0], [6508.0, 0.0], [6668.0, 0.0], [6788.0, 0.0], [6888.0, 0.0], [6856.0, 0.0], [6828.0, 0.0], [6740.0, 0.0], [6800.0, 0.0], [6780.0, 0.0], [6840.0, 0.0], [6720.0, 0.0], [6736.0, 0.0], [6968.0, 0.0], [7028.0, 0.0], [7068.0, 0.0], [7152.0, 0.0], [6932.0, 0.0], [6948.0, 0.0], [7072.0, 0.0], [7380.0, 0.0], [7192.0, 0.0], [4193.0, 0.0], [4233.0, 0.0], [4261.0, 0.0], [4581.0, 0.0], [4461.0, 0.0], [4365.0, 0.0], [4525.0, 0.0], [4493.0, 0.0], [4849.0, 0.0], [4649.0, 0.0], [4717.0, 0.0], [4609.0, 0.0], [5041.0, 0.0], [4949.0, 0.0], [4909.0, 0.0], [5069.0, 0.0], [4945.0, 0.0], [5133.0, 0.0], [5245.0, 0.0], [5329.0, 0.0], [5309.0, 0.0], [5225.0, 0.0], [5181.0, 0.0], [5433.0, 0.0], [5577.0, 0.0], [5393.0, 0.0], [5457.0, 0.0], [5453.0, 0.0], [5445.0, 0.0], [5589.0, 0.0], [5533.0, 0.0], [5629.0, 0.0], [5541.0, 0.0], [5429.0, 0.0], [5421.0, 0.0], [5585.0, 0.0], [5745.0, 0.0], [5665.0, 0.0], [5721.0, 0.0], [5709.0, 0.0], [5705.0, 0.0], [5657.0, 0.0], [5641.0, 0.0], [5797.0, 0.0], [5805.0, 0.0], [6005.0, 0.0], [5981.0, 0.0], [6033.0, 0.0], [5973.0, 0.0], [5965.0, 0.0], [5953.0, 0.0], [6141.0, 0.0], [6121.0, 0.0], [6089.0, 0.0], [6137.0, 0.0], [6065.0, 0.0], [6037.0, 0.0], [6061.0, 0.0], [6169.0, 0.0], [6381.0, 0.0], [6285.0, 0.0], [6293.0, 0.0], [6149.0, 0.0], [6153.0, 0.0], [6157.0, 0.0], [6161.0, 0.0], [6369.0, 0.0], [6349.0, 0.0], [6205.0, 0.0], [6181.0, 0.0], [6341.0, 0.0], [6257.0, 0.0], [6221.0, 0.0], [6269.0, 0.0], [6633.0, 0.0], [6617.0, 0.0], [6637.0, 0.0], [6405.0, 0.0], [6409.0, 0.0], [6413.0, 0.0], [6485.0, 0.0], [6481.0, 0.0], [6465.0, 0.0], [6497.0, 0.0], [6521.0, 0.0], [6421.0, 0.0], [6597.0, 0.0], [6433.0, 0.0], [6453.0, 0.0], [6457.0, 0.0], [6581.0, 0.0], [6573.0, 0.0], [6545.0, 0.0], [6529.0, 0.0], [6653.0, 0.0], [6865.0, 0.0], [6849.0, 0.0], [6897.0, 0.0], [6901.0, 0.0], [6837.0, 0.0], [6829.0, 0.0], [6709.0, 0.0], [6689.0, 0.0], [6697.0, 0.0], [6713.0, 0.0], [6793.0, 0.0], [6937.0, 0.0], [7033.0, 0.0], [7001.0, 0.0], [6997.0, 0.0], [7057.0, 0.0], [6993.0, 0.0], [7269.0, 0.0], [7317.0, 0.0], [7281.0, 0.0], [7185.0, 0.0], [2151.0, 0.0], [2067.0, 0.0], [2195.0, 0.0], [2185.0, 0.0], [2305.0, 0.0], [2385.0, 0.0], [2901.0, 0.0], [2987.0, 0.0], [3453.0, 0.0], [3487.0, 0.0], [3483.0, 0.0], [3647.0, 0.0], [3749.0, 0.0], [3763.0, 0.0], [3755.0, 0.0], [3851.0, 0.0], [3905.0, 0.0], [3867.0, 0.0], [4093.0, 0.0], [4049.0, 0.0], [4114.0, 0.0], [4326.0, 0.0], [4602.0, 0.0], [4490.0, 0.0], [4510.0, 0.0], [4354.0, 0.0], [4562.0, 0.0], [4370.0, 0.0], [4386.0, 0.0], [4450.0, 0.0], [4862.0, 0.0], [4734.0, 0.0], [4786.0, 0.0], [4834.0, 0.0], [4662.0, 0.0], [4746.0, 0.0], [4778.0, 0.0], [4686.0, 0.0], [4730.0, 0.0], [5062.0, 0.0], [5106.0, 0.0], [4954.0, 0.0], [4970.0, 0.0], [5054.0, 0.0], [5362.0, 0.0], [5286.0, 0.0], [5190.0, 0.0], [5138.0, 0.0], [5586.0, 0.0], [5418.0, 0.0], [5410.0, 0.0], [5414.0, 0.0], [5442.0, 0.0], [5466.0, 0.0], [5630.0, 0.0], [5602.0, 0.0], [5518.0, 0.0], [5526.0, 0.0], [5546.0, 0.0], [5534.0, 0.0], [5554.0, 0.0], [5566.0, 0.0], [5854.0, 0.0], [5710.0, 0.0], [5706.0, 0.0], [5838.0, 0.0], [5830.0, 0.0], [5862.0, 0.0], [5634.0, 0.0], [5670.0, 0.0], [5674.0, 0.0], [5694.0, 0.0], [5874.0, 0.0], [5782.0, 0.0], [5778.0, 0.0], [5786.0, 0.0], [5814.0, 0.0], [5702.0, 0.0], [5926.0, 0.0], [6126.0, 0.0], [6090.0, 0.0], [6106.0, 0.0], [5950.0, 0.0], [6134.0, 0.0], [6034.0, 0.0], [6026.0, 0.0], [6142.0, 0.0], [6074.0, 0.0], [6070.0, 0.0], [5910.0, 0.0], [5918.0, 0.0], [5894.0, 0.0], [6006.0, 0.0], [5998.0, 0.0], [5974.0, 0.0], [6366.0, 0.0], [6358.0, 0.0], [6362.0, 0.0], [6398.0, 0.0], [6278.0, 0.0], [6334.0, 0.0], [6314.0, 0.0], [6146.0, 0.0], [6258.0, 0.0], [6262.0, 0.0], [6374.0, 0.0], [6390.0, 0.0], [6378.0, 0.0], [6370.0, 0.0], [6162.0, 0.0], [6150.0, 0.0], [6178.0, 0.0], [6190.0, 0.0], [6238.0, 0.0], [6234.0, 0.0], [6210.0, 0.0], [6250.0, 0.0], [6246.0, 0.0], [6462.0, 0.0], [6570.0, 0.0], [6590.0, 0.0], [6510.0, 0.0], [6490.0, 0.0], [6406.0, 0.0], [6422.0, 0.0], [6438.0, 0.0], [6602.0, 0.0], [6598.0, 0.0], [6618.0, 0.0], [6546.0, 0.0], [6542.0, 0.0], [6654.0, 0.0], [6530.0, 0.0], [6634.0, 0.0], [6718.0, 0.0], [6690.0, 0.0], [6710.0, 0.0], [6714.0, 0.0], [6894.0, 0.0], [6858.0, 0.0], [6830.0, 0.0], [6810.0, 0.0], [6818.0, 0.0], [6838.0, 0.0], [6834.0, 0.0], [6674.0, 0.0], [6754.0, 0.0], [6746.0, 0.0], [6758.0, 0.0], [6658.0, 0.0], [6878.0, 0.0], [7022.0, 0.0], [6986.0, 0.0], [7010.0, 0.0], [6990.0, 0.0], [6982.0, 0.0], [7038.0, 0.0], [6930.0, 0.0], [7142.0, 0.0], [6958.0, 0.0], [6978.0, 0.0], [7230.0, 0.0], [4255.0, 0.0], [4147.0, 0.0], [4335.0, 0.0], [4563.0, 0.0], [4439.0, 0.0], [4363.0, 0.0], [4543.0, 0.0], [4583.0, 0.0], [4819.0, 0.0], [4627.0, 0.0], [4631.0, 0.0], [4787.0, 0.0], [4759.0, 0.0], [4803.0, 0.0], [4751.0, 0.0], [5111.0, 0.0], [5043.0, 0.0], [5015.0, 0.0], [5087.0, 0.0], [5091.0, 0.0], [4911.0, 0.0], [5083.0, 0.0], [5351.0, 0.0], [5299.0, 0.0], [5219.0, 0.0], [5311.0, 0.0], [5291.0, 0.0], [5303.0, 0.0], [5183.0, 0.0], [5167.0, 0.0], [5127.0, 0.0], [5439.0, 0.0], [5411.0, 0.0], [5503.0, 0.0], [5499.0, 0.0], [5587.0, 0.0], [5555.0, 0.0], [5511.0, 0.0], [5571.0, 0.0], [5579.0, 0.0], [5687.0, 0.0], [5663.0, 0.0], [5871.0, 0.0], [5835.0, 0.0], [5863.0, 0.0], [5723.0, 0.0], [5707.0, 0.0], [5751.0, 0.0], [5635.0, 0.0], [5771.0, 0.0], [5887.0, 0.0], [6131.0, 0.0], [5971.0, 0.0], [5955.0, 0.0], [5991.0, 0.0], [6031.0, 0.0], [6139.0, 0.0], [6135.0, 0.0], [6019.0, 0.0], [6059.0, 0.0], [6039.0, 0.0], [6063.0, 0.0], [6087.0, 0.0], [5947.0, 0.0], [5939.0, 0.0], [6383.0, 0.0], [6275.0, 0.0], [6391.0, 0.0], [6387.0, 0.0], [6203.0, 0.0], [6187.0, 0.0], [6163.0, 0.0], [6179.0, 0.0], [6371.0, 0.0], [6315.0, 0.0], [6327.0, 0.0], [6303.0, 0.0], [6287.0, 0.0], [6295.0, 0.0], [6211.0, 0.0], [6239.0, 0.0], [6219.0, 0.0], [6427.0, 0.0], [6507.0, 0.0], [6415.0, 0.0], [6419.0, 0.0], [6495.0, 0.0], [6479.0, 0.0], [6531.0, 0.0], [6447.0, 0.0], [6603.0, 0.0], [6451.0, 0.0], [6431.0, 0.0], [6515.0, 0.0], [6647.0, 0.0], [6679.0, 0.0], [6783.0, 0.0], [6743.0, 0.0], [6727.0, 0.0], [6775.0, 0.0], [6683.0, 0.0], [6891.0, 0.0], [6787.0, 0.0], [6839.0, 0.0], [6847.0, 0.0], [6687.0, 0.0], [6711.0, 0.0], [7031.0, 0.0], [7047.0, 0.0], [7011.0, 0.0], [6975.0, 0.0], [7075.0, 0.0], [7275.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7380.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1201.6, "minX": 1.73644674E12, "maxY": 6190.55, "series": [{"data": [[1.73644716E12, 5952.466666666666], [1.73644734E12, 4704.683333333333], [1.73644686E12, 4648.616666666667], [1.73644728E12, 5965.95], [1.7364468E12, 5138.333333333333], [1.73644698E12, 4700.533333333334], [1.73644692E12, 5930.716666666666], [1.7364471E12, 5476.283333333334], [1.73644704E12, 5536.883333333333], [1.73644722E12, 6190.55], [1.73644674E12, 1201.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73644734E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 22.866666666666667, "minX": 1.73644674E12, "maxY": 5937.7, "series": [{"data": [[1.73644716E12, 133.68333333333334], [1.73644734E12, 113.01666666666667], [1.73644686E12, 126.18333333333334], [1.73644728E12, 132.55], [1.7364468E12, 148.31666666666666], [1.73644698E12, 128.1], [1.73644692E12, 137.58333333333334], [1.7364471E12, 137.2], [1.73644704E12, 136.91666666666666], [1.73644722E12, 138.98333333333332], [1.73644674E12, 35.93333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73644716E12, 5733.3], [1.73644734E12, 4570.95], [1.73644686E12, 4395.166666666667], [1.73644728E12, 5717.133333333333], [1.7364468E12, 4990.2], [1.73644698E12, 4473.866666666667], [1.73644692E12, 5765.5], [1.7364471E12, 5275.883333333333], [1.73644704E12, 5399.983333333334], [1.73644722E12, 5937.7], [1.73644674E12, 1163.4166666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.73644716E12, 84.5], [1.73644734E12, 22.866666666666667], [1.73644686E12, 127.43333333333334], [1.73644728E12, 118.08333333333333], [1.73644698E12, 98.61666666666666], [1.73644692E12, 27.533333333333335], [1.7364471E12, 63.233333333333334], [1.73644722E12, 112.78333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73644734E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 35.93333333333333, "minX": 1.73644674E12, "maxY": 6050.483333333334, "series": [{"data": [[1.73644716E12, 133.68333333333334], [1.73644734E12, 113.01666666666667], [1.73644686E12, 126.18333333333334], [1.73644728E12, 132.55], [1.7364468E12, 148.31666666666666], [1.73644698E12, 128.1], [1.73644692E12, 137.58333333333334], [1.7364471E12, 137.2], [1.73644704E12, 136.91666666666666], [1.73644722E12, 138.98333333333332], [1.73644674E12, 35.93333333333333]], "isOverall": false, "label": "Client Login-success", "isController": false}, {"data": [[1.73644716E12, 5817.8], [1.73644734E12, 4593.816666666667], [1.73644686E12, 4522.6], [1.73644728E12, 5835.216666666666], [1.7364468E12, 4990.2], [1.73644698E12, 4572.483333333334], [1.73644692E12, 5793.033333333334], [1.7364471E12, 5339.116666666667], [1.73644704E12, 5399.983333333334], [1.73644722E12, 6050.483333333334], [1.73644674E12, 1163.4166666666667]], "isOverall": false, "label": "Client Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73644734E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 35.93333333333333, "minX": 1.73644674E12, "maxY": 6050.483333333334, "series": [{"data": [[1.73644716E12, 133.68333333333334], [1.73644734E12, 113.01666666666667], [1.73644686E12, 126.18333333333334], [1.73644728E12, 132.55], [1.7364468E12, 148.31666666666666], [1.73644698E12, 128.1], [1.73644692E12, 137.58333333333334], [1.7364471E12, 137.2], [1.73644704E12, 136.91666666666666], [1.73644722E12, 138.98333333333332], [1.73644674E12, 35.93333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73644716E12, 5817.8], [1.73644734E12, 4593.816666666667], [1.73644686E12, 4522.6], [1.73644728E12, 5835.216666666666], [1.7364468E12, 4990.2], [1.73644698E12, 4572.483333333334], [1.73644692E12, 5793.033333333334], [1.7364471E12, 5339.116666666667], [1.73644704E12, 5399.983333333334], [1.73644722E12, 6050.483333333334], [1.73644674E12, 1163.4166666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73644734E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

